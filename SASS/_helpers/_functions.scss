//***************************************************************************//
//*                                                                     *****//
//*                  FUNZIONI
//*              descrizione - descrizione - descrizione
//*                                                                         *//
//***************************************************************************//

//****************************************************************************//
//*                           FUNZIONI PER i FONT
//*             Per il funzionamento della funzione vedere "FUNZIONI
//*             PER I COLORI" in questa pagina
//****************************************************************************//

// String replace
@function str-replace($string, $old, $new) {
  $index: str-index($string, $old);
  @if $index > 0 and $new != $old {
    // Doing magic
  }

  @return $string;

}

///
// Font
///
@function font($style, $attr: 'fs') {
  @return map-get(map-get($fonts, $style), $attr);
}


///
// Deep map get for fonts sub maps
///
@function responsive-font($style, $attr: 'lg', $nested-attr: 'fs') {
  @return map-get(map-get(map-get($fonts, $style), $attr), $nested-attr);
}


///
// Max width function
///
@function max-width($mw: md) {
  @return map-get($max-widths, $mw);
}

///
// Max width function
///
@function spacing($sp: 1) {

  @if type-of($sp) == 'number' {
    @return $space * $sp;
  }

  @else {
    @if str-index($sp, '-') != 1 {
      @return map-get($spacing, $sp);
    }
    @else {
      $new_sp: str-slice($sp, 2);

      @return map-get($spacing, $new_sp) * -1;
    }
  }
}



//****************************************************************************//
//*                   FUNZIONI PER I COLORI
//****************************************************************************//

////
//  Questa funzione incatena 2 map-get sulla map $colors
//
//    il primo (più interno) dice: nella mappa $colors
//    cerca la key $palette (che deve essere specificata)
//
//    Il map-get più esterno invece utilizza la key tirata fuori predentemente //    (quindi la "palette" - p.es "socket") per abbinargli un sotto valore
//    nestato al suo interno.
//
//  ESEMPI DI UTILIZZO:
//    background: palette(header, bg);
//    restituisce il valore salvato nella key: header / sotto-key: bg
///
@function palette($palette, $element: 'body') {
    @return map-get(map-get($palettes, $palette), $element);
}

@function main-colors($palette, $element: 'body') {
    @return map-get(map-get($main-colors, $palette), $element);
}

//****************************************************************************//
//*                   PX to EM
//****************************************************************************//
@function em($value: $base * 1px) {
  @return ($value / 1px) / ($font-size * $base / 1em) * 1em;
}



//****************************************************************************//
//*                  CALCOLO FS DINAMICO
//****************************************************************************//
@function between($min, $max, $minWidth, $maxWidth, $pct:'%'){
  $slope : ($max - $min) / ($maxWidth - $minWidth);
  $intercept : $max - ($slope * $maxWidth);
  @if $intercept == 0 {
    @return #{$slope*100}#{$pct};
  }	@else{
      @return calc( #{$slope*100}#{$pct} + #{$intercept}px );
  }
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}
